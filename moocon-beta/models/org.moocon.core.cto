/**
 * Definitions for the network
 * Possible Resource Types:
 * Assets, Participants, Transactions, Events, Enumerated Types, Concepts
 * TODO: add decorators for API
 */
namespace org.moocon.core

/**
 * Participants
 */

abstract participant User identified by uId {
  o String uId
  o String firstName
  o String lastName
  o String nid
  o String organisation optional
}

participant Learner extends User {
  --> CourseModule[] mods
  --> Submission[] subs
  --> Certificate[] certs
  o Double balance
  o Integer[] acLevels
  o String[] privilledgedReaders
}

participant Teacher extends User {
  --> CourseModule[] mods  
}

participant Reader extends User {
}

/**
 * Assets
 */

transaction CreateModule {
  o CourseModule mod
}

asset CourseModule identified by modId{
  o String modId
  --> Teacher[] teachers
  --> CourseModule[] prerequisites
  --> CourseModule[] corequisites
  o String modTitle
  o Double cost
  o String[] learningObjectives
  o ModuleUnit[] units
}

asset ModuleUnit identified by unitId{
  o String unitId
  --> CourseModule mod
  o String unitTitle
  o String materialMd
  o Assessment assessment
}

abstract asset Assessment identified by assessId{
  o String assessId
  --> ModuleUnit unit
  o Boolean terminal
  o Integer weighting  
  o String resultType
  o String[] knowledgeRequired
  o GradeDescriptor[] gradeDescriptors
  o MarkingCriterion[] criteria
  o Integer passingStandard  // position of grade array / score
  o String detailsMd
}

asset AutoAssessment extends Assessment{
  o String testType
  o String testFile
}

asset AssessorAssessment extends Assessment{
  o String testType 
}

asset Submission identified by subId {
  o String subId
  --> Learner learner
  --> Teacher teacherAssigned
  --> ModuleUnit unit
  o String content
  o String comments
  o DateTime timeAdded
  o DateTime timeAssessed optional
  o AssessmentResult result optional
}

asset Curriculum identified by currId{
  o String currId
  --> Teacher teacher
  --> Learner learner
  --> Certificate[] cert optional
  o String[] modIds
  o String currTitle optional
  o String notes optional
  o String programmeOutcome optional
  o Boolean approved default = false
}

asset Certificate identified by certId {
  o String certId
  --> Learner learner
  --> Teacher[] signatories
  --> Submission[] subs 
  --> Curriculum curriculum
  o AssessmentResult overallResult optional
  o String detailsMd
  o Boolean visible default = false
}

/**
 * Assessment Use Case
 */

transaction AddSubmission {
  --> Learner learner
  --> ModuleUnit unit
  o String content
  o String comments
}

event SubmissionUploaded {
  --> Submission submission
  o String unitId
  o String teacherId optional
}

transaction SubmitResult {
  --> Submission submission
  --> Teacher assessor
  o Integer[] marks
  o String feedbackMd
  // o AssessmentResult result
}

event ResultAvailable {
  --> Submission submission
  o String unitId  
  o String details
}

event CourseModuleCompleted {
  --> Teacher teacherAssigned
  --> Submission submission
  o String modId
}

/*
 * Curriculum Personalisation Use Case
 */

transaction ProposeCurriculum {
  --> Learner learner
  --> Teacher teacher
  o String existingCurrId optional
  o String[] modIds
}

event CurriculumProposed {
  --> Curriculum curriculum
}

transaction ApproveCurriculum {
  o Curriculum curriculum
  o Boolean[] hasCert 
  // [0] for whether the curriculum has a cert, [n!=0] for the list of courses
}

event CurriculumApproved {
  --> Curriculum curriculum
}

/**
 * Certificate Awarding Use Case
 * Tx 5 SignCertificate: 
 * 
 */

transaction SignCertificate {
  --> Certificate cert
  --> Teacher signer
}

event NewCertificate {
  o String certId
}

/**
 * Concepts: enum/ objects that are not assets or participants 
 */

abstract concept AssessmentResult {
  o Boolean passed
  o String feedbackMd
}

concept ScoreResult extends AssessmentResult{
  o Double score
  o Double maxScore
}

concept GradeResult extends AssessmentResult{
  o String grade
  o GradeDescriptor[] gradeDescriptors
}

concept PassFailResult extends AssessmentResult{
  o GradeDescriptor[] gradeDescriptors  
}

concept GradeDescriptor {
  o String grade
  o String descriptions
}

concept MarkingCriterion {
  o String heading
  o String details
  o Integer weighting
}

/* 
* planned transactions, not implemented
*/ 

transaction EditModule {
  o CourseModule mod
}

transaction EditUnit {
  o ModuleUnit unit
}

transaction EditAssessment {
  o Assessment assessment
}

// /*
// *  Future Work: Peer and Self Assessments
// */

// asset PeerAssessment extends Assessment{
//   o GradeDescriptor[] gradeDescriptors
//   o MarkingCriterion[] criteria
//   o Integer passingStandard  
// }

// event PeerFeedbackRequest {
//   --> Submission submission
//   --> Learner peerAssessor
// }

// transaction SubmitPeerFeedback {
//   --> Submission submission
//   --> Learner peerAssessor  
//   o String gradesMd
//   o String comments
// }

// asset SelfAssessment extends Assessment{
// }

// /* 
// * legacy transactions/ events from alpha
// */ 

// event BalanceChanges {
//   --> User user
//   o Double oldBalance
//   o Double newBalance
//   o String details
// }

// transaction BeginModule {
//   --> Learner learner
//   --> CourseModule mod
// }

// transaction AutoAssess {
//   --> Submission submission
// }

// additional asset required for automatic marking API calls 
asset AutoAssessRequest identified by reqId {
  o String reqId
  --> Submission submission
  o String content
  o String testFile
  o String response optional
}





