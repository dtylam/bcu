/**
 * Definitions for the network
 * Possible Resource Types:
 * Assets, Participants, Transactions, Events, Enumerated Types, Concepts
 * TODO: add decorators for API
 */
namespace org.moocon.core

//Participants

abstract participant User identified by uId {
  o String uId
  o String firstName
  o String lastName
  o String nid
}

participant Learner extends User {
  --> CourseModule[] mods
  --> Submission[] subs
  --> Certificate[] certs
  o Double balance
  o Integer[] acLevels
  o String[] privilledgedReaders
}

participant Teacher extends User {
  --> CourseModule[] mods  
  o String organisation
}

participant Reader extends User {
  o String organisation optional
}

// Use Case

transaction CreateModule {
  o CourseModule mod
}

asset CourseModule identified by modId{
  o String modId
  --> Teacher[] teachers
  --> CourseModule[] prerequisites
  --> CourseModule[] corequisites
  o String modTitle
  o Double cost
  o String[] learningObjectives
  o ModuleUnit[] units
}

asset ModuleUnit identified by unitId{
  o String unitId
  --> CourseModule mod
  o String unitTitle
  o String materialMd
  o Assessment assessment
}

abstract asset Assessment identified by assessId{
  o String assessId
  --> ModuleUnit unit
  o Boolean terminal
  o Integer weighting  
  o String resultType
  o String[] knowledgeRequired
  o String detailsMd
}


transaction AddSubmission {
  --> Learner learner
  --> ModuleUnit unit
  o String content
  o String comments
}

asset Submission identified by subId {
  o String subId
  --> Learner learner
  --> Teacher teacherAssigned
  --> ModuleUnit unit
  o String content
  o String comments
  o DateTime timeAdded
  o DateTime timeAssessed optional
  o AssessmentResult result optional
}

event SubmissionUploaded {
  --> Submission submission
  o String unitId
  o String teacherId optional
}

asset AutoAssessment extends Assessment{
  o String testType
  o String testFile
  o GradeDescriptor[] gradeDescriptors
  o MarkingCriterion[] criteria  
  o Integer passingStandard  
}

asset AutoAssessRequest identified by reqId {
  o String reqId
  --> Submission submission
  o String content
  o String testFile
  o String response optional
}

asset AssessorAssessment extends Assessment{
  o String testType  
  o GradeDescriptor[] gradeDescriptors
  o MarkingCriterion[] criteria
  o Integer passingStandard  // position of grade array / score
}

transaction SubmitResult {
  --> Submission submission
  --> Teacher assessor
  o Integer[] marks
  o String feedbackMd
  // o AssessmentResult result
}

asset PeerAssessment extends Assessment{
  o GradeDescriptor[] gradeDescriptors
  o MarkingCriterion[] criteria
  o Integer passingStandard  
}

event PeerFeedbackRequest {
  --> Submission submission
  --> Learner peerAssessor
}

transaction SubmitPeerFeedback {
  --> Submission submission
  --> Learner peerAssessor  
  o String gradesMd
  o String comments
}

asset SelfAssessment extends Assessment{
}

event ResultAvailable {
  --> Submission submission
  o String unitId  
  o String details
}

event CourseModuleCompleted {
  --> Teacher teacherAssigned
  --> Submission submission
  o String modId
}

transaction GenCertificate {
  --> Submission[] subs
  --> Curriculum curriculum optional  
  --> Teacher orderer
}

asset Certificate identified by certId {
  o String certId
  --> Learner learner
  --> Teacher teacher
  --> CourseModule[] mods
  --> Submission[] subs
  --> Curriculum curriculum optional
  o AssessmentResult overallResult optional
  o String fineprintMd
}

event NewCertificate {
  --> CourseModule mod
  --> Certificate cert
}

// concepts

abstract concept AssessmentResult {
  o Boolean passed
  o String feedbackMd
}

concept ScoreResult extends AssessmentResult{
  o Double score
  o Double maxScore
}

concept GradeResult extends AssessmentResult{
  o String grade
  o GradeDescriptor[] gradeDescriptors
}

concept PassFailResult extends AssessmentResult{
  o GradeDescriptor[] gradeDescriptors  
}

concept GradeDescriptor {
  o String grade
  o String descriptions
}

concept MarkingCriterion {
  o String heading
  o String details
  o Integer weighting
}

// Curriculum Personalisation Use Case

asset Curriculum identified by currId{
  o String currId
  --> Teacher teacher
  --> Learner learner
  o String[] modIds
  o String curTitle optional
  o String notes optional
  o String programmeOutcome optional
  o Boolean approved default = false
}

transaction ProposeCurriculum {
  --> Learner learner
  --> Teacher teacher
  o String existingCurrId optional
  o String[] modIds
}

event CurriculumProposed {
  --> Curriculum curriculum
  // o String details
}

transaction ApproveCurriculum {
  o Curriculum curriculum
}

event CurriculumApproved {
  --> Curriculum curriculum
  // o String details
}

// legacy transactions/ events from alpha

event BalanceChanges {
  --> User user
  o Double oldBalance
  o Double newBalance
  o String details
}

transaction BeginModule {
  --> Learner learner
  --> CourseModule mod
}

transaction AutoAssess {
  --> Submission submission
}

// planned transactions, not implemented

transaction EditModule {
  o CourseModule mod
}

transaction EditUnit {
  o ModuleUnit unit
}

transaction EditAssessment {
  o Assessment assessment
}






